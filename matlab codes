%Trapezoidal method
format short
clear all;
clc
f=@(x) 1./(1+x);
a= input ('Enter the lower limit a:');
b= input ('Enter the lower limit b:');
n= input('Enter the no of Subinterval:');
h=(b-a)/n;
i=1:1:n-1;
S=f(a+i.*h);
out=(h./2).*(f(a)+2.*sum(S)+f(b));
fprintf('The value of integration is %f:', out);

%Simpsons rule
format short
clear all;
clc
f=@(x) cos(x)-log(x)+exp(x);
a=input('Enter the lower limit a:');
b=input('Enter the lower limit b:');
n=input('Enter the no of subintervals n:');
h=(b-a)/n;
if rem(n,2)==1
    fprintf('\n Enter Valid value of n');
    n= input ('Enter the even value of n:');
end
k=1:1:n-1;
S=f(a+k.*h);
So=sum(S(1:2:n-1));
Se=sum(S(2:2:n-1));
out=(h./3).*(f(a)+4.*(Se)+2.*(So)+f(b));
fprintf('The value of intergral is %f\n', out);

% Modified Euler Method
format short
clear all;
clc
% Define the objective function
f= @(x,y) x.*y;
% Input the parameters
x= input ('Enter the initial value of x:');
y= input ('Enter the initial value of y(x):');
h= input ('Enter the step size:');
X= input ('The value of x at which value of y is required:');
Variables={'x','y','fxy','yp','newx','fxyp','yc'};
k=1;  %Set iteration counter
while X-x>=-10^(-10)
    fprintf('Value of y at x=%0.2f is %0.2f\n',x,y);
    fxy=f(x,y);
    yp=y+h.*(fxy);
    newx=x+h;
    fxyp=f(newx,yp);
    yc=y+(h./2).*(fxy+fxyp);
    % for printing purpose
    rsl(k,:)=[x y fxy yp newx fxyp yc];
    k=k+1;
    x=x+h;
    y=yc;
end

%Runge Kutta Method
format short
clear all;
clc
f=@(x,y) x.*(y.^(1/3));
x= input ('Enter the initial value of x:');
y= input ('Enter the initial value of y(x):');
h= input ('Enter the step size:');
X= input ('The value of x at which value of y is required:');
while X-x>=-10^(-10)
    fprintf('Value of y at x=%f is %f\n',x,y);
    k1=h.*f(x,y);
    k2=h.*f(x+h/2,y+k1/2);
    k3=h.*f(x+h/2,y+k2/2);
    k4=h.*f(x+h,y+k3);
    k=(k1+2.*k2+2.*k3+k4)./6;
    x=x+h;
    y=y+k;
end
